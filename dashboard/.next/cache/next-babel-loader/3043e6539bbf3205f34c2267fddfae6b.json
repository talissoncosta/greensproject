{"ast":null,"code":"var _jsxFileName = \"/usr/src/dashboard/components/Table.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect, useState } from 'react';\nimport { Button, ButtonGroup, Container, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Snackbar } from '@material-ui/core';\nimport { Delete, Edit } from '@material-ui/icons';\nimport MUIDataTable from \"mui-datatables\";\nimport { MuiThemeProvider } from '@material-ui/core/styles';\nimport ModalEdit from './ModalEdit';\nimport moment from 'moment';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport { fetcher, remove } from '../services/api';\n\nfunction Alert(props) {\n  return __jsx(MuiAlert, _extends({\n    elevation: 6,\n    variant: \"filled\"\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }));\n}\n\nconst options = {\n  print: false,\n  selectableRows: false,\n  responsive: 'stacked'\n};\nexport default function TableProducts({\n  updateTable\n}) {\n  const {\n    0: tableData,\n    1: setTableData\n  } = useState([]);\n  const {\n    0: openDialog,\n    1: setOpenDialog\n  } = useState(false);\n  const {\n    0: itemSelected,\n    1: setItemSelected\n  } = useState('');\n  const {\n    0: openModal,\n    1: setOpenModal\n  } = useState(false);\n  const {\n    0: types,\n    1: setTypes\n  } = useState([]);\n  const {\n    0: openSnackSuccess,\n    1: setOpenSnack\n  } = useState(false);\n  const {\n    0: openSnackError,\n    1: setOpenSnackError\n  } = useState(false);\n  const {\n    0: tableUpdate,\n    1: setTableUpdate\n  } = useState(false);\n\n  async function handleData(data) {\n    let arr = [];\n    let arrType = [];\n    data.forEach(el => {\n      arrType.push(el.type);\n      arr.push([el._id, el.title, el.type, el.rating, el.price, moment(el.createdAt).format('YYYY-MM-DD HH:mm:ss'), el.height, el.width, el.description]);\n    });\n    setTypes([...new Set(arrType)]);\n    return arr;\n  }\n\n  async function handleUpdateTable() {\n    setTableUpdate(!tableUpdate);\n  }\n\n  ;\n\n  async function confirmDelete(id) {\n    setItemSelected(id);\n    setOpenDialog(true);\n  }\n\n  ;\n\n  const handleCloseSnackError = () => {\n    setOpenSnackError(false);\n  };\n\n  const handleCloseSnackSuccess = () => {\n    setOpenSnack(false);\n  };\n\n  async function editProduct(id) {\n    setItemSelected(id);\n    setOpenModal(true);\n  }\n\n  ;\n\n  async function handleCloseDialog() {\n    setOpenDialog(false);\n  }\n\n  ;\n\n  async function deleteProduct() {\n    const response = await remove(`/products/${itemSelected}`);\n\n    if (response.success) {\n      setOpenSnack(true);\n      handleUpdateTable();\n    } else {\n      setOpenSnackError(true);\n    }\n\n    setOpenDialog(false);\n  }\n\n  ;\n  const columns = [{\n    name: \"Id\",\n    options: {\n      display: false,\n      download: false\n    }\n  }, {\n    name: \"Title\",\n    options: {\n      filter: true\n    }\n  }, {\n    name: \"Type\",\n    options: {\n      filter: true\n    }\n  }, {\n    name: \"Rating\",\n    options: {\n      filter: true\n    }\n  }, {\n    name: \"Price\",\n    options: {\n      filter: true\n    }\n  }, {\n    name: \"Created\",\n    options: {\n      filter: true,\n      sort: true\n    }\n  }, {\n    name: \"Height\",\n    options: {\n      filter: true,\n      sorte: true,\n      display: false\n    }\n  }, {\n    name: \"Width\",\n    options: {\n      filter: true,\n      sorte: true,\n      display: false\n    }\n  }, {\n    name: \"Description\",\n    options: {\n      filter: true,\n      sort: true,\n      display: false\n    }\n  }, {\n    name: \"Action\",\n    options: {\n      filter: false,\n      sort: false,\n      empty: true,\n      download: false,\n      customBodyRender: (value, tableMeta, updateValue) => {\n        return __jsx(ButtonGroup, {\n          color: \"primary\",\n          \"aria-label\": \"outlined button group\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151\n          },\n          __self: this\n        }, __jsx(Button, {\n          onClick: () => editProduct(tableMeta.rowData[0]),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152\n          },\n          __self: this\n        }, \" \", __jsx(Edit, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152\n          },\n          __self: this\n        }), \"Edit\"), __jsx(Button, {\n          onClick: () => confirmDelete(tableMeta.rowData[0]),\n          color: \"secondary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153\n          },\n          __self: this\n        }, __jsx(Delete, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153\n          },\n          __self: this\n        }), \"Delete\"));\n      }\n    }\n  }];\n\n  async function fetchData() {\n    const response = await fetcher(`/products`);\n    setTableData((await handleData(response)));\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, [updateTable || tableUpdate]);\n  useEffect(() => {\n    fetchData();\n  }, []);\n  return __jsx(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, __jsx(ModalEdit, {\n    open: openModal,\n    setOpen: setOpenModal,\n    types: types,\n    item: itemSelected,\n    setUpdateTable: handleUpdateTable,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }), __jsx(MuiThemeProvider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, __jsx(MUIDataTable, {\n    title: \"Products List\",\n    data: tableData,\n    columns: columns,\n    options: options,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  })), __jsx(Dialog, {\n    open: openDialog,\n    onClose: handleCloseDialog,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, __jsx(DialogTitle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, \"Delete\"), __jsx(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, __jsx(DialogContentText, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, \"Are you sure you want to delete this product?\")), __jsx(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }, __jsx(Button, {\n    color: \"error\",\n    autoFocus: true,\n    onClick: handleCloseDialog,\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }, \"Cancel\"), __jsx(Button, {\n    color: \"success\",\n    onClick: deleteProduct,\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }, \"Confirm\"))), __jsx(Snackbar, {\n    open: openSnackSuccess,\n    autoHideDuration: 3000,\n    onClose: handleCloseSnackSuccess,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }, __jsx(Alert, {\n    severity: \"success\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }, \"Sucess! The product was succesfully deleted!\")), __jsx(Snackbar, {\n    open: openSnackError,\n    autoHideDuration: 3000,\n    onClose: handleCloseSnackError,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }, __jsx(Alert, {\n    severity: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }, \"Failed to delete the product!\")));\n}\n;","map":{"version":3,"sources":["/usr/src/dashboard/components/Table.js"],"names":["React","useEffect","useState","Button","ButtonGroup","Container","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","Snackbar","Delete","Edit","MUIDataTable","MuiThemeProvider","ModalEdit","moment","MuiAlert","fetcher","remove","Alert","props","options","print","selectableRows","responsive","TableProducts","updateTable","tableData","setTableData","openDialog","setOpenDialog","itemSelected","setItemSelected","openModal","setOpenModal","types","setTypes","openSnackSuccess","setOpenSnack","openSnackError","setOpenSnackError","tableUpdate","setTableUpdate","handleData","data","arr","arrType","forEach","el","push","type","_id","title","rating","price","createdAt","format","height","width","description","Set","handleUpdateTable","confirmDelete","id","handleCloseSnackError","handleCloseSnackSuccess","editProduct","handleCloseDialog","deleteProduct","response","success","columns","name","display","download","filter","sort","sorte","empty","customBodyRender","value","tableMeta","updateValue","rowData","fetchData"],"mappings":"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","sourcesContent":["import React, {useEffect,useState} from 'react'\nimport {Button,ButtonGroup,Container,Dialog,DialogActions,DialogContent,DialogContentText,DialogTitle,Snackbar} from '@material-ui/core';\nimport { Delete,Edit } from '@material-ui/icons';\nimport MUIDataTable from \"mui-datatables\";\nimport {MuiThemeProvider } from '@material-ui/core/styles';\nimport ModalEdit from './ModalEdit';\nimport moment from 'moment'\nimport MuiAlert from '@material-ui/lab/Alert';\nimport {fetcher,remove} from '../services/api'\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst options = {\n  print:false,\n  selectableRows:false,\n  responsive:'stacked'\n};\n \nexport default function TableProducts({updateTable}){\n  const [tableData, setTableData] = useState([]);\n  const [openDialog, setOpenDialog] = useState(false);\n  const [itemSelected, setItemSelected] = useState('');\n  const [openModal, setOpenModal] = useState(false);\n  const [types, setTypes] = useState([]);\n  const [openSnackSuccess, setOpenSnack] = useState(false);\n  const [openSnackError, setOpenSnackError] = useState(false);\n  const [tableUpdate,setTableUpdate] = useState(false);\n      async function handleData(data) {\n        let arr = [];\n        let arrType = [];\n        data.forEach(el => {\n          arrType.push(el.type);\n          arr.push([\n            el._id,\n            el.title,\n            el.type,\n            el.rating,\n            el.price,\n            moment(el.createdAt).format('YYYY-MM-DD HH:mm:ss'),\n            el.height,\n            el.width,\n            el.description,\n          ])\n        });\n        setTypes([...new Set(arrType)])\n        return arr;\n      }\n      async function handleUpdateTable(){\n        setTableUpdate(!tableUpdate)\n      };\n      async function confirmDelete(id){\n        setItemSelected(id);\n        setOpenDialog(true);\n      };\n      const handleCloseSnackError = () => {\n        setOpenSnackError(false);\n    };\n      const handleCloseSnackSuccess = () => {\n          setOpenSnack(false);\n      };\n      async function editProduct(id) {\n        setItemSelected(id);\n        setOpenModal(true);\n\n      };\n      async function handleCloseDialog(){\n        setOpenDialog(false);\n      };\n      async function deleteProduct(){\n        const response = await remove(`/products/${itemSelected}`);\n        if(response.success){\n          setOpenSnack(true)\n          handleUpdateTable();\n        }else{\n          setOpenSnackError(true)\n        }\n        setOpenDialog(false);\n      };\n     const columns = [\n\n      {\n        name: \"Id\",\n        options: {\n          display: false,\n          download:false\n        }\n      },\n      {\n        name: \"Title\",\n        options: {\n          filter: true,\n        }\n      },\n      {\n        name: \"Type\",\n        options: {\n          filter: true,\n        }\n      },\n      {\n        name: \"Rating\",\n        options: {\n          filter: true,\n        }\n      },\n      {\n        name: \"Price\",\n        options: {\n          filter: true,\n        }\n      },\n      {\n        name: \"Created\",\n        options: {\n          filter: true,\n          sort: true,\n        }\n      },{\n        name: \"Height\",\n        options: {\n          filter: true,\n          sorte:true,\n          display:false\n        }\n      }, {\n        name: \"Width\",\n        options: {\n          filter: true,\n          sorte:true,\n          display:false\n        }\n      }, {\n        name: \"Description\",\n        options: {\n          filter: true,\n          sort: true,\n          display:false\n        }\n      },\n      {\n        name: \"Action\",\n        options: {\n          filter: false,\n          sort: false,\n          empty: true,\n          download:false,\n          customBodyRender: (value, tableMeta, updateValue) => {\n            return (\n              <ButtonGroup color=\"primary\" aria-label=\"outlined button group\">\n                <Button onClick={() => editProduct(tableMeta.rowData[0])} > <Edit/>Edit</Button>\n                <Button onClick={() => confirmDelete(tableMeta.rowData[0])} color=\"secondary\"><Delete/>Delete</Button>\n              </ButtonGroup>\n\n            );\n          }\n        }\n      },\n    ];\n  async function fetchData() {\n    const response = await fetcher(`/products`);\n    setTableData(await handleData(response));\n  }\n  useEffect(() => {\n      fetchData();\n  }, [updateTable || tableUpdate]);\n\n  useEffect(() => {\n      fetchData();\n  }, []);\n  return (\n    \n    <Container>\n      <ModalEdit open={openModal} setOpen={setOpenModal} types={types} item={itemSelected} setUpdateTable={handleUpdateTable}/>\n      <MuiThemeProvider>\n        <MUIDataTable \n          title={\"Products List\"} \n          data={tableData} \n          columns={columns} \n          options={options} \n        />\n      </MuiThemeProvider>\n\n      <Dialog\n        open={openDialog}\n        onClose={handleCloseDialog}\n      >\n        <DialogTitle >\n         Delete\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Are you sure you want to delete this product?\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button color=\"error\" autoFocus onClick={handleCloseDialog} color=\"primary\">\n            Cancel\n          </Button>\n          <Button color=\"success\" onClick={deleteProduct} color=\"primary\">\n            Confirm\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <Snackbar open={openSnackSuccess} autoHideDuration={3000} onClose={handleCloseSnackSuccess} >\n          <Alert  severity=\"success\">\n              Sucess! The product was succesfully deleted!\n          </Alert>\n      </Snackbar>\n      <Snackbar open={openSnackError} autoHideDuration={3000} onClose={handleCloseSnackError} >\n          <Alert  severity=\"error\">\n              Failed to delete the product!\n          </Alert>\n      </Snackbar>\n    </Container>\n  )\n};\n\n"]},"metadata":{},"sourceType":"module"}