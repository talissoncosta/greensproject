{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar API_URL = 'http://api:3001';\n\nvar fetcher = function fetcher(path) {\n  var res, json;\n  return _regeneratorRuntime.async(function fetcher$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(fetch(API_URL + path));\n\n        case 3:\n          res = _context.sent;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 6:\n          json = _context.sent;\n          return _context.abrupt(\"return\", json);\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          return _context.abrupt(\"return\", _context.t0);\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 10]]);\n};\n\nvar post = function post(path, data) {\n  var rawResponse, content;\n  return _regeneratorRuntime.async(function post$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(fetch(API_URL + path, {\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            body: data\n          }));\n\n        case 3:\n          rawResponse = _context2.sent;\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(rawResponse.json());\n\n        case 6:\n          content = _context2.sent;\n          return _context2.abrupt(\"return\", content);\n\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](0);\n          return _context2.abrupt(\"return\", _context2.t0);\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 10]]);\n};\n\nvar update = function update(path, data) {\n  var rawResponse, content;\n  return _regeneratorRuntime.async(function update$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(fetch(API_URL + path, {\n            method: 'PUT',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json'\n            },\n            mode: 'cors',\n            body: _JSON$stringify(data)\n          }));\n\n        case 3:\n          rawResponse = _context3.sent;\n          _context3.next = 6;\n          return _regeneratorRuntime.awrap(rawResponse.json());\n\n        case 6:\n          content = _context3.sent;\n          return _context3.abrupt(\"return\", content);\n\n        case 10:\n          _context3.prev = 10;\n          _context3.t0 = _context3[\"catch\"](0);\n          return _context3.abrupt(\"return\", _context3.t0);\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[0, 10]]);\n};\n\nvar remove = function remove(path) {\n  var rawResponse, content;\n  return _regeneratorRuntime.async(function remove$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(fetch(API_URL + path, {\n            method: 'DELETE',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json'\n            }\n          }));\n\n        case 3:\n          rawResponse = _context4.sent;\n          _context4.next = 6;\n          return _regeneratorRuntime.awrap(rawResponse.json());\n\n        case 6:\n          content = _context4.sent;\n          return _context4.abrupt(\"return\", content);\n\n        case 10:\n          _context4.prev = 10;\n          _context4.t0 = _context4[\"catch\"](0);\n          return _context4.abrupt(\"return\", _context4.t0);\n\n        case 13:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[0, 10]]);\n};\n\nexport { fetcher, post, update, remove };","map":{"version":3,"sources":["/usr/src/dashboard/services/api.js"],"names":["API_URL","fetcher","path","fetch","res","json","post","data","method","headers","mode","body","rawResponse","content","update","remove"],"mappings":";;AAAA,IAAMA,OAAO,GAAG,iBAAhB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEMC,KAAK,CAACH,OAAO,GAAGE,IAAX,CAFX;;AAAA;AAENE,UAAAA,GAFM;AAAA;AAAA,2CAGOA,GAAG,CAACC,IAAJ,EAHP;;AAAA;AAGNA,UAAAA,IAHM;AAAA,2CAILA,IAJK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhB;;AAUA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAOJ,IAAP,EAAYK,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEiBJ,KAAK,CAACH,OAAO,GAAGE,IAAX,EAAiB;AAC9CM,YAAAA,MAAM,EAAE,MADsC;AAE9CC,YAAAA,OAAO,EAAE;AACP,wBAAU,kBADH;AAEP,8BAAgB;AAFT,aAFqC;AAM9CC,YAAAA,IAAI,EAAE,MANwC;AAO9CC,YAAAA,IAAI,EAAEJ;AAPwC,WAAjB,CAFtB;;AAAA;AAEHK,UAAAA,WAFG;AAAA;AAAA,2CAWaA,WAAW,CAACP,IAAZ,EAXb;;AAAA;AAWHQ,UAAAA,OAXG;AAAA,4CAYFA,OAZE;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAb;;AAkBA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAOZ,IAAP,EAAYK,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEeJ,KAAK,CAACH,OAAO,GAAGE,IAAX,EAAiB;AAC9CM,YAAAA,MAAM,EAAE,KADsC;AAE9CC,YAAAA,OAAO,EAAE;AACP,wBAAU,kBADH;AAEP,8BAAgB;AAFT,aAFqC;AAK7BC,YAAAA,IAAI,EAAE,MALuB;AAO9CC,YAAAA,IAAI,EAAE,gBAAeJ,IAAf;AAPwC,WAAjB,CAFpB;;AAAA;AAELK,UAAAA,WAFK;AAAA;AAAA,2CAWWA,WAAW,CAACP,IAAZ,EAXX;;AAAA;AAWLQ,UAAAA,OAXK;AAAA,4CAYJA,OAZI;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAf;;AAkBA,IAAME,MAAM,GAAG,SAATA,MAAS,CAAOb,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEeC,KAAK,CAACH,OAAO,GAAGE,IAAX,EAAiB;AAC9CM,YAAAA,MAAM,EAAE,QADsC;AAE9CC,YAAAA,OAAO,EAAE;AACP,wBAAU,kBADH;AAEP,8BAAgB;AAFT;AAFqC,WAAjB,CAFpB;;AAAA;AAELG,UAAAA,WAFK;AAAA;AAAA,2CASWA,WAAW,CAACP,IAAZ,EATX;;AAAA;AASLQ,UAAAA,OATK;AAAA,4CAUJA,OAVI;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAf;;AAgBA,SAASZ,OAAT,EAAiBK,IAAjB,EAAsBQ,MAAtB,EAA6BC,MAA7B","sourcesContent":["const API_URL = 'http://api:3001'\n\nconst fetcher = async (path) =>  {\n  try {\n    const res = await fetch(API_URL + path)\n    const json = await res.json();\n    return json;\n  } catch (error) {\n    return error;\n  }\n\n}\nconst post = async (path,data) =>  {\n  try {\n    const rawResponse = await fetch(API_URL + path, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      mode: 'cors',\n      body: data\n    });\n    const content = await rawResponse.json();\n    return content;\n  } catch (error) {\n    return error;\n  }\n\n}\nconst update = async (path,data) =>  {\n  try {\n    const rawResponse = await fetch(API_URL + path, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },               mode: 'cors',\n  \n      body: JSON.stringify(data)\n    });\n    const content = await rawResponse.json();\n    return content;\n  } catch (error) {\n    return error;\n  }\n\n}\nconst remove = async (path) =>  {\n  try {\n    const rawResponse = await fetch(API_URL + path, {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    });\n    const content = await rawResponse.json();\n    return content;\n  } catch (error) {\n    return error;\n  }\n\n}\nexport  {fetcher,post,update,remove};"]},"metadata":{},"sourceType":"module"}